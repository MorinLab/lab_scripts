#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
This script uses the GSC's internal API to retrieve the file paths for given
library IDs. Currently, this script handles the following library types:

    - genome: Merged genome BAM files
    - mrna: RNA-seq aligned BAM files (JaGUaR pipeline)
    - mirna: miRNA BAM files
    - targeted: Hybridization capture sequencing BAM files

I haven't tried this script to obtain BAM file paths for exomes or other
types of sequencing. You can try inputting the library ID with -t genome.
If that doesn't work, I can look into adding support for these additional
library types.

This script also needs your GSC GIN credentials. By default, it looks in
your home directory. The format is shown below:

    $ cat ~/.gin_credentials.ini
    [credentials]
    username: foobar
    password: Re64zuqN2

N.B. Don't forget to make the file read-only for just the owner (chmod 500).

For more information on the GSC's API, visit the following page:
http://www.bcgsc.ca/data/bioapps-docs/bioapps.api/docs/

Human Reference IDs:
    13	   Homo sapiens hg18
    17	   Homo sapiens hg19
    18	   Homo sapiens hg19 1000genomes
    77	   Homo sapiens hg19a JAGuaR 1.7.5 ens61
    79	   Homo sapiens hg19a JAGuaR 1.7.5 ens59
    80	   Homo sapiens hg19a JAGuaR 1.7.5 ens65only
    106	   Homo sapiens hg38
    111	   Homo sapiens hg38 JAGuaR 1.7.5 ens79
    121	   Homo sapiens hg19a STAR 2.5.2a ens69
    122	   Homo sapiens 38_no_alt STAR 2.5.2a ens79
    124	   Homo sapiens hg19a STAR 2.5.2b ens69
    125	   Homo sapiens 38_no_alt STAR 2.5.2b ens79
"""


import sys
import os.path
import datetime
import argparse
import pdb
import configparser
import requests
import json
import glob

# Base URL for REST API
BASE_URL = "http://sbs:8100"

# Used to track is any library ID returned more than one BAM file path.
# This is used to warn the user at the end about any omitted BAM file paths.
is_multiple = False  # Global variable
IS_MULTIPLE_MSG = (
    "WARNING: "
    "At least one library ID returned multiple BAM files. "
    "The most recent one was returned by default. "
    "To obtain all of the BAM file paths, enable -a. "
    "To inspect the API results more closely, enable -v or -vv. "
    "To disable this warning, enable -q. "
    "For more information about these options, run with --help.")

# Track verbosity at the global level
verbosity = 0

# Session web authentication token
session_token = ""


def main():
    """Main program.

    Returns:
        None
    """
    args = parse_args()
    api = config_api(args.credentials)
    if args.debug:
        pdb.set_trace()
        query_api("merge", {"library": "A82276"})
    for lib_id in args.library_id:
        bam_paths = get_bam_paths(api, lib_id, args.library_type, args.reference_id)
        log_bam_paths(bam_paths)
        if not args.all and len(bam_paths) > 1:
            global is_multiple
            is_multiple = True
            bam_paths = bam_paths[0:1]
        for path in bam_paths:
            oline = "{}\t{}\n".format(lib_id, path)
            args.output.write(oline)
    args.output.close()
    if is_multiple and not args.quiet:
        log(IS_MULTIPLE_MSG)


def parse_args():
    """Parse command-line arguments.

    Returns:
        A namespace containing the arguments
    """
    # Default values
    default_config = os.path.expanduser("~/.gin_credentials.ini")
    # Parse command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("library_id", nargs="+", help="List of library IDs (space separated).")
    parser.add_argument("--library_type", "-t", choices=["genome", "mrna", "mirna", "targeted"],
                        default="genome", help="Library type for given library IDs. [genome]")
    parser.add_argument("--output", "-o", type=argparse.FileType("w"), default="-",
                        help="Output TSV file with library ID and BAM file path. [stdout]")
    parser.add_argument("--credentials", "-c", default=default_config,
                        help="INI configuration with GIN credentials. See script header for "
                        "example. [{}]".format(default_config))
    parser.add_argument("--all", "-a", action="store_true", help="Output all BAM file paths.")
    parser.add_argument("--verbose", "-v", action="count", default=0,
                        help="Increase the script's verbosity. Can use multiple times (-vv)")
    parser.add_argument("--quiet", "-q", action="store_true",
                        help="Mute multiple BAM file warning.")
    parser.add_argument("--debug", "-d", action="store_true", help="Trigger API debugger")
    parser.add_argument("--reference_id", "-r", type=int,
                        help="LIMS genome reference ID (see script header for examples)")
    args = parser.parse_args()
    # Handle special arguments
    if not os.path.exists(args.credentials):
        raise ValueError("Configuration file for GIN credentials doesn't exist: "
                         "{}".format(args.credentials))
    global verbosity
    verbosity = args.verbose
    # Return arguments
    return args


def config_api(credentials_path):
    """Retrieve an authentication web token.
    Sets global session token.

    Returns:
        An authentication token (string)
    """
    # Obtain GIN credentials from file
    config = configparser.ConfigParser()
    config.read(credentials_path)
    gin_username = config.get("credentials", "username")
    gin_password = config.get("credentials", "password")
    body =  {"username": gin_username, "password": gin_password}
    # Configure and create the API connection
    url = BASE_URL + "/session"
    response = requests.post(url, json = body)
    token = json.loads(response.text)["token"]
    global session_token
    session_token = token
    return token


def query_api(endpoint, params):
    """Query specified endpoint.

    Returns:
        Deserialized JSON data (dict)
    """
    url = BASE_URL + "/" + endpoint
    headers = {
        "X-Token": session_token,
        "Content-Type": "application/json",
        "Accept": "application/json"}
    response = requests.get(url, headers=headers, params=params)
    data = json.loads(response.text)
    return data


def parse_date(s):
    """Parse timestamps as returned by the GSC API.
    Example: 2015-11-05T01:41:29

    Returns:
        A datetime object
    """
    return datetime.datetime.strptime(s[:16], "%Y-%m-%dT%H:%M")


def date_key(key_name):
    """Return function that uses key_name to order a
    list of dictionaries
    """
    return lambda x: parse_date(x[key_name])


def log(msg):
    """Prints a message to stderr.

    Returns:
        None
    """
    print(msg, file=sys.stderr)


def log_library_id(lib_id):
    """Log library ID.

    Returns:
        None
    """
    global verbosity
    if verbosity >= 1:
        log("Library ID: {}".format(lib_id))


def log_bam_paths(bam_paths):
    """Log BAM file paths.

    Returns:
        None
    """
    global verbosity
    if verbosity >= 1:
        log("Number of BAM paths: {}".format(len(bam_paths)))
    if verbosity >= 2:
        log("All BAM Paths: \n  - {}".format("\n  - ".join(bam_paths)))


def log_api_results(lib_info):
    """Log API results.

    Returns:
        None
    """
    global verbosity
    if verbosity >= 3:
        log("API result: {}".format(lib_info))


def find_bam(dirname, file_glob):
    """Return a BAM file path according to the given directory
    and file name glob.
    """
    if dirname is None:
        return None
    full_glob = os.path.join(dirname, file_glob)
    bam_file = glob.glob(full_glob)
    if len(bam_file) < 1:
        return None
    elif len(bam_file) > 1:
        bam_file = [f for f in bam_file if "dupsFlagged" in f]
    if len(bam_file) > 1:
        raise ValueError("More than one file matches the glob {}".format(full_glob))
    return bam_file[0]


def get_bam_paths(api, lib_id, lib_type, ref=None):
    """Retrieve all BAM file paths using API.

    The appropriate function will be used according to the
    lirbary type.

    Returns:
        List of BAM file paths (strings), ["N/A"] if none are returned
    """
    log_library_id(lib_id)
    if lib_type == "mirna":
        bam_paths = get_mirnaseq_bam(lib_id, ref=ref)
    elif lib_type == "mrna":
        bam_paths = get_rnaseq_bam(lib_id, ref=ref)
    else:
        bam_paths = get_genome_bam(lib_id, ref=ref)
    if bam_paths is None or len(bam_paths) == 0:
        bam_paths = ["N/A"]
    return bam_paths


def get_genome_bam(lib_id, ref=None):
    """Retrieve the path of a genome BAM file.

    The list is sorted in order of creation (newest first).

    Returns:
        List of BAM file paths (strings), can be None.
    """
    params = {"library": lib_id}
    if ref is not None:
        params["lims_genome_reference_id"] = ref
    merges_raw = query_api("merge", params)
    log_api_results(merges_raw)
    merges = filter(lambda x: x["success"], merges_raw)
    merges = filter(lambda x: x["status"] == "production", merges_raw)
    merges = list(merges)
    if len(merges) == 0:
        return None
    merges = sorted(merges, key=date_key("complete"), reverse=True)
    if all(m["merge_alignment_stats"] is not None for m in merges):
        readcount_key = lambda x: x["merge_alignment_stats"]["total_reads"]
        merges = sorted(merges, key=readcount_key, reverse=True)
    bam_paths = []
    for merge in merges:
        lib_bam_dir = merge["data_path"]
        lib_bam_file = find_bam(lib_bam_dir, "*.bam")
        if lib_bam_file:
            bam_paths.append(lib_bam_file)
    return bam_paths


def get_rnaseq_bam(lib_id, ref=None):
    """Retrieve the path of a RNA-seq BAM file aligned using
    the JaGUaR pipeline.

    The list is sorted in order of completion (newest first).

    Returns:
        List of BAM file paths (strings), can be empty
    """
    params = {"library": lib_id}
    analyses_raw = query_api("reposition", params)
    log_api_results(analyses_raw)
    # Ensure that repositioning worked
    analyses = filter(lambda x: x["successful"], analyses_raw)
    # Ensure that alignment worked
    analyses = filter(lambda x: x["aligned_libcore"]["successful"], analyses)
    # Ensure that sequencing QC passed
    analyses = filter(
        lambda x: x["aligned_libcore"]["libcore"]["bio_qc_status"] != "Failed", analyses)
    if ref is not None:
        ref_filter = lambda x: x["aligned_libcore"]["lims_genome_reference_id"] == ref
        analyses = filter(ref_filter, analyses)
    analyses = list(analyses)
    if len(analyses) == 0:
        return None
    analyses = sorted(analyses, key=date_key("stop"), reverse=True)
    bam_paths = []
    for analysis in analyses:
        lib_bam_dir = analysis["data_path"]
        lib_bam_file = find_bam(lib_bam_dir, "*withJunctionsOnGenome_dupsFlagged.bam")
        if lib_bam_file:
            bam_paths.append(lib_bam_file)
    return bam_paths


def get_mirnaseq_bam(lib_id, ref=None):
    """Retrieve the path of a miRNA-seq BAM file.

    The list is sorted in order of creation (newest first).

    Returns:
        List of BAM file paths (strings), can be empty
    """
    params = {"library": lib_id}
    # if ref is not None:
    #     params["lims_genome_reference_id"] = ref
    analyses_raw = query_api("micro_rna", params)
    log_api_results(analyses_raw)
    analyses = filter(lambda x: x["successful"], analyses_raw)
    analyses = filter(lambda x: "custom" not in x["analysis_parameters"]["parameters"],
                      analyses)
    if ref is not None:
        ref_filter = lambda x: x["aligned_libcore"]["lims_genome_reference_id"] == ref
        analyses = filter(ref_filter, analyses)
    analyses = list(analyses)
    if len(analyses) == 0:
        return None
    analyses = sorted(analyses, key=date_key("stop"), reverse=True)
    bam_paths = []
    for analysis in analyses:
        lib_bam_dir = analysis["aligned_libcore"]["data_path"]
        lib_bam_file = find_bam(lib_bam_dir, "*.bam")
        if lib_bam_file:
            bam_paths.append(lib_bam_file)
    return bam_paths


if __name__ == '__main__':
    main()
